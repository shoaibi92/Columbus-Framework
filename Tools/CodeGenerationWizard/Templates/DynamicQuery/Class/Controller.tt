<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var modelName = view.Properties[BusinessView.ModelName];
    var entityName = view.Properties[BusinessView.EntityName];

    var webModuleNamespace = settings.DoesAreasExist ? "Web.Areas." + moduleId : moduleId + ".Web";
#>
// <#=copyright#>

#region Namespace

using System.Web.Mvc;
using System.Web.Routing;
using System.Web.SessionState;
using Microsoft.Practices.Unity;
using Sage.CA.SBS.ERP.Sage300.Common.Exceptions;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums;
using Sage.CA.SBS.ERP.Sage300.Common.Resources;
using Sage.CA.SBS.ERP.Sage300.Common.Utilities;
using Sage.CA.SBS.ERP.Sage300.Common.Web.AreaConstants;
using Sage.CA.SBS.ERP.Sage300.KPI.Models.Preference;
using Sage.CA.SBS.ERP.Sage300.KPI.Web.Controllers.Base;
using Sage.CA.SBS.ERP.Sage300.Common.Resources.Portal;
using <#=companyNamespace#>.<#=moduleId#>.Models;
using <#=companyNamespace#>.<#=webModuleNamespace#>.Models;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.Services;

#endregion

namespace <#=companyNamespace#>.<#=webModuleNamespace#>.Controllers
{
    /// <summary>
    /// Public controller for <#=entityName#>
    /// </summary>
    /// <typeparam name="T"><#=modelName#></typeparam>
    [SessionState(SessionStateBehavior.ReadOnly)]
    public class <#=entityName#>Controller<T> : DynamicQueryController<<#=entityName#>ViewModel<T>, WidgetConfiguration, T>
        where T : <#=modelName#>, new()
    {
        #region Internal variables

        /// <summary>
        /// Service class
        /// </summary>
        internal I<#=entityName#>Service<T> Service;

        #endregion

        #region Constructor

        /// <summary>
        /// Constructor for <#=entityName#>
        /// </summary>
        /// <param name="container">Unity Container</param>
        public <#=entityName#>Controller(IUnityContainer container)
            : base(container,"<#=moduleId#><#=entityName#>")
        {
        }

        #endregion

        #region Initialize

        /// <summary>
        /// Override Initialize method
        /// </summary>
        /// <param name="requestContext">Request Context</param>
        protected override void Initialize(RequestContext requestContext)
        {
            // Base initializations
            base.Initialize(requestContext);

            // Additional initializations
            // TODO: Replace first string.Empty with constant for User Preference Key (i.e. Constant.<#=entityName#>WidgetId)
            // TODO: Replace second string.Empty with constant for Blob Name (i.e. Constant.<#=entityName#>BlobName)
            // TODO: Replace third string.Empty with resx string for Widget Title (i.e. HomePage.<#=entityName#>)
            // TODO: Replace fourth string.Empty with constant for Edit View (i.e. Widget.Edit<#=entityName#>Title)
            // TODO: Delete TODO statements when complete
            AdditionalInitializations(string.Empty,
                string.Empty, string.Empty,
                string.Empty);

            // Service initialization
            Service = Context.Container.Resolve<I<#=entityName#>Service<T>>(new ParameterOverride(Parameter, Context));
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Gets <#=modelName#>
        /// </summary>
        /// <returns><#=modelName#></returns>
        public ActionResult Index()
        {
            try
            {
                var model = new <#=entityName#>ViewModel<T>
                {
                    UserAccess = new UserAccess(),
                    UserMessage = new UserMessage(),
                    // TODO: Generic Get routine has been added and will require filter
                    // TODO: parameters to be added based upon Dynamic Query requirements
                    // TODO: Delete TODO statements when complete
                    Data = Get(),
                    WidgetName = GetWidgetTitle()
                };

                return View(model);
            }
            catch (BusinessException businessException)
            {
            return JsonNet(BuildErrorModelKPI(CommonResx.GetFailedMessage, businessException, CommonResx.DynamicQuery));
            }
        }

        #endregion

        #region Private methods

        /// <summary>
        /// Gets <#=modelName#>
        /// </summary>
        /// <returns>DynamicQueryEnumerableResponse</returns>
        // TODO: Generic Get routine has been added and will require filter
        // TODO: parameters to be added based upon Dynamic Query requirements
        // TODO: Delete TODO statements when complete
        private DynamicQueryEnumerableResponse<T> Get()
        {
            // Init return
            DynamicQueryEnumerableResponse<T> response;

            // Determine if cached (get from cache) or not (get it then cache it)
            if (CommonService.IsBlobValid(BlobName))
            {
                var jsonModel = CommonService.PullTextFromCache(BlobName);
                response = JsonSerializer.Deserialize<DynamicQueryEnumerableResponse<T>>(jsonModel);
            }
            else
            {
                response = Service.Get();
                CommonService.PushTextInToCache(BlobName, JsonSerializer.Serialize(response));
            }

            return response;
        }

        #endregion
    }
}

