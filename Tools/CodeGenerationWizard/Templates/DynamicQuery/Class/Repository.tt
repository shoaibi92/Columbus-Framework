<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
    // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var modelName = view.Properties[BusinessView.ModelName];
    var entityName = view.Properties[BusinessView.EntityName];
#>
// <#=copyright#>

#region Namespace

using System.Collections.Generic;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository.Base;
using Sage.CA.SBS.ERP.Sage300.Common.Interfaces.Entity;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.BusinessRepository;
using <#=companyNamespace#>.<#=moduleId#>.Models;

#endregion

namespace <#=companyNamespace#>.<#=moduleId#>.BusinessRepository
{
	/// <summary>
	/// Repository Class for <#=entityName#>
	/// </summary>
	/// <typeparam name="T"><#=modelName#></typeparam>
	public class <#=entityName#>Repository<T> : DynamicQueryRepository<T>, I<#=entityName#>Entity<T>
		where T : <#=modelName#>, new()
	{
		#region Constants
		// TODO: Create constants here for Filters, if any (i.e. private const string FilterTopCount = "TopCount";)
		// TODO: Delete TODO statements when complete
		#endregion

		#region Constructor

		/// <summary>
		/// Constructor for <#=entityName#>
		/// </summary>
		/// <param name="context">Context</param>
		public <#=entityName#>Repository(Context context)
			: base(context)
		{
		}

		/// <summary>
		/// Constructor for <#=entityName#>
		/// </summary>
		/// <param name="context">Context</param>
		/// <param name="session">Business Entity Session</param>
		public <#=entityName#>Repository(Context context, IBusinessEntitySession session)
			: base(context, session)
		{
		}

		#endregion

		#region Public methods

		/// <summary>
		/// Gets <#=modelName#>
		/// </summary>
		/// <param name="args">Optional Parameters</param>
		/// <returns>DynamicQueryEnumerableResponse</returns>
		// TODO: Generic Get routine has been added and will require filter
		// TODO: parameters to be added based upon Dynamic Query requirements
		// TODO: Delete TODO statements when complete
		public DynamicQueryEnumerableResponse<T> Get(params object[] args)
		{
			// Init and execute query in base class (check rights, validate args, init business entity, map data) and store filters
			// TODO: For internal developers, replace first string.Empty with key to resx file for query (i.e. "KPI019")
			// TODO: For external developers, the mothods to be used is 'ExecuteSQL' and replace first string.Empty with valid sql statement for query (i.e. "Select ...")
			// TODO: Delete TODO statements when complete
			var response = Execute(string.Empty, args);
			// TODO: Add any filters to Filters collection here (i.e. response.Filters.Add(FilterTopCount, topCount.ToString()))
			// TODO: Delete TODO statements when complete

			return response;
		}

		#endregion

		#region Abstract methods

		/// <summary>
		/// Map the data
		/// </summary>
		/// <returns>DynamicQueryEnumerableResponse</returns>
		protected override DynamicQueryEnumerableResponse<T> Map()
		{
			// Init response and items for mapping
			var response = new DynamicQueryEnumerableResponse<T>();
			var items = new List<T>();

			// Iterate results of query
			while (BusinessEntity.Fetch(false))
			{
				var model = new T
				{
					// TODO: Map to model here (i.e. Amount = BusinessEntity.GetValue<decimal>(Customer.Index.Amount))
					// TODO: Delete TODO statements when complete
				};
				items.Add(model);
			}

			response.Items = items;
			return response;
		}

		#endregion
	}
}
