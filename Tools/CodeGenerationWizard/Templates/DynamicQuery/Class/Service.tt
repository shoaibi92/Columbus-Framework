<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
    // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var modelName = view.Properties[BusinessView.ModelName];
    var entityName = view.Properties[BusinessView.EntityName];
#>
// <#=copyright#>

#region Namespace

using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Services.Base;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.BusinessRepository;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.Services;
using <#=companyNamespace#>.<#=moduleId#>.Models;

#endregion

namespace <#=companyNamespace#>.<#=moduleId#>.Services
{
    /// <summary>
    /// Service for <#=entityName#>
    /// </summary>
    /// <typeparam name="T"><#=modelName#></typeparam>
    public class <#=entityName#>EntityService<T> : DynamicQueryService<T, I<#=entityName#>Entity<T>>, I<#=entityName#>Service<T>
        where T : <#=modelName#>, new()
    {
        #region Constructor

        /// <summary>
        /// Constructor for <#=entityName#>
        /// </summary>
        /// <param name="context">Request Context</param>
        public <#=entityName#>EntityService(Context context)
            : base(context)
        {
        }

        #endregion

        #region IDynamicQueryEntityService

        /// <summary>
        /// Gets <#=modelName#>
        /// </summary>
		/// <param name="args">Optional Parameters</param>
        /// <returns>DynamicQueryEnumerableResponse</returns>
        // TODO: Generic Get routine has been added and will require filter
        // TODO: parameters to be added based upon Dynamic Query requirements
        // TODO: Delete TODO statements when complete
        public DynamicQueryEnumerableResponse<T> Get(params object[] args)
        {
            using (var repository = Resolve<I<#=entityName#>Entity<T>>())
            {
                return repository.Get(args);
            }
        }
        #endregion
    }
}
