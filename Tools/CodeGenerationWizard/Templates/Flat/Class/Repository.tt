<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var modelName = view.Properties[BusinessView.ModelName];
    var entityName = view.Properties[BusinessView.EntityName];
#>
// <#=copyright#>

#region Namespace

using System;
using System.Linq.Expressions;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository.Base;
using Sage.CA.SBS.ERP.Sage300.Common.Interfaces.Entity;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Utilities;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums;
using <#=companyNamespace#>.<#=moduleId#>.BusinessRepository.Mappers;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.BusinessRepository;
using <#=companyNamespace#>.<#=moduleId#>.Models;

#endregion

namespace <#=companyNamespace#>.<#=moduleId#>.BusinessRepository
{
    /// <summary>
    /// Class <#=entityName#> Repository
    /// </summary>
    /// <typeparam name="T">Where T is type of <see cref="<#=modelName#>"/></typeparam>
    public class <#=entityName#>Repository<T> : FlatRepository<T>, I<#=entityName#>Entity<T>
        where T : <#=modelName#>, new()
    {
        #region Variables

        /// <summary>
        /// Mapper
        /// </summary>
        private ModelMapper<T> _mapper;

        /// <summary>
        /// Business Entity
        /// </summary>
        private IBusinessEntity _businessEntity;

        #endregion

        #region Constructor

        /// <summary>
        /// Constructor for <#=entityName#>
        /// </summary>
        /// <param name="context">Context</param>
        public <#=entityName#>Repository(Context context)
            : base(context, new <#=modelName#>Mapper<T>(context), ActiveFilter)
        {
            SetFilter(context);
        }

        /// <summary>
        /// Constructor for <#=entityName#>
        /// </summary>
        /// <param name="context">Context</param>
        /// <param name="session">Business Entity Session</param>
        public <#=entityName#>Repository(Context context, IBusinessEntitySession session)
            : base(context, new <#=modelName#>Mapper<T>(context), ActiveFilter, session)
        {
            SetFilter(context);
        }

        #endregion

        #region Protected/public methods

        /// <summary>
        /// Additional Access Check for Export and Import
        /// </summary>
        /// <returns>User Access</returns>
        public override UserAccess GetAccessRights()
        {
            var userAccess = base.GetAccessRights();
            if (SecurityCheck(Security.<#=moduleId#>Import))
            {
                userAccess.SecurityType |= SecurityType.Import;
            }
            if (SecurityCheck(Security.<#=moduleId#>Export))
            {
                userAccess.SecurityType |= SecurityType.Export;
            }
            return userAccess;
        }

        /// <summary>
        /// Create entities for repository
        /// </summary>
        /// <returns>Business Entity</returns>
        protected override IBusinessEntity CreateBusinessEntities()
        {
            CreateBusinessEntitiesInternal();
            return _businessEntity;
        }

        /// <summary>
        /// Get Update Expression
        /// </summary>
        /// <param name="model">Model for <#=modelName#></param>
        /// <returns>Expression</returns>
        protected override Expression<Func<T, bool>> GetUpdateExpression(T model)
        {
            return entity => 
<#
    for (var i = 0; i <  view.Keys.Count; i++)
    {
        var keyFieldName = view.Keys[i];
        var keyType= view.Fields.First(x => x.Name.Equals(keyFieldName)).Type;
        var startLine = (i.Equals(0)) ? "(" : string.Empty;
        var token = (keyType.Equals(BusinessDataType.String)) ? "StartsWith" : "Equals";
        var endLine = (i.Equals(view.Keys.Count - 1)) ? ");" : " &&";
#>
                <#=startLine#>entity.<#=keyFieldName#>.<#=token#>(model.<#=keyFieldName#>)<#=endLine#>
<#
    }
#>
        }

        #endregion

        #region Private methods

        /// <summary>
        /// ActiveFilter Condition
        /// </summary>
        /// <value>The active filter</value>
        private static Expression<Func<T, bool>> ActiveFilter
        {
            get { return null; }
        }

        /// <summary>
        /// Creates the business entities
        /// </summary>
        private void CreateBusinessEntitiesInternal()
        {
            _businessEntity = OpenEntity(<#=modelName#>.EntityName);
        }

        /// <summary>
        /// Set Filter
        /// </summary>
        /// <param name="context">Context</param>
        private void SetFilter(Context context)
        {
            ValidRecordFilter = null;
            ValidRecordFilter = (model => 
<#
    for (var i = 0; i <  view.Keys.Count; i++)
    {
        var keyFieldName = view.Keys[i];
        var keyType= view.Fields.First(x => x.Name.Equals(keyFieldName)).Type;
        var token = (keyType.Equals(BusinessDataType.String)) ? "!string.IsNullOrEmpty(model." + keyFieldName + ")" : "!model." + keyFieldName + ".Equals(0)";
        var endLine = (i.Equals(view.Keys.Count - 1)) ? ");" : " &&";
#>
                <#=token#><#=endLine#>
<#
    }
#>

            _mapper = new <#=modelName#>Mapper<T>(context);
        }

        #endregion
    }
}