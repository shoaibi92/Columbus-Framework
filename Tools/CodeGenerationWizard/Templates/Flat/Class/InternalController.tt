<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var resxName = settings.ResxName;
    var modelName = view.Properties[BusinessView.ModelName];
    var entityName = view.Properties[BusinessView.EntityName];
    var keyFieldName = view.Keys.FirstOrDefault();

    var webModuleNamespace = settings.DoesAreasExist ? "Web.Areas." + moduleId : moduleId + ".Web";
#>
// <#=copyright#>

#region Namespace

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections.Generic;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Resources;
using Sage.CA.SBS.ERP.Sage300.Common.Web;
using Sage.CA.SBS.ERP.Sage300.Common.Web.Controllers.ExportImport;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.Services;
using <#=companyNamespace#>.<#=moduleId#>.Models;
<#
	if (view.Enums.Count > 0)
	{
#>
using <#=companyNamespace#>.<#=moduleId#>.Models.Enums;
<#
	}
#>
using <#=companyNamespace#>.<#=moduleId#>.Resources.Forms;
using <#=companyNamespace#>.<#=webModuleNamespace#>.Models;

#endregion

namespace <#=companyNamespace#>.<#=webModuleNamespace#>.Controllers
{
    /// <summary>
    /// <#=entityName#> Internal Controller
    /// </summary>
    /// <typeparam name="T">Where T is type of <see cref="<#=modelName#>"/></typeparam>
    public class <#=entityName#>ControllerInternal<T> : BaseExportImportControllerInternal<T, I<#=entityName#>Service<T>>
        where T : <#=modelName#>, new()
    {
        #region Private variables

        #endregion

        #region Constructor

        /// <summary>
        /// New instance of <see cref="<#=entityName#>ControllerInternal{T}"/>
        /// </summary>
        /// <param name="context">Context</param>
        public <#=entityName#>ControllerInternal(Context context)
            : base(context)
        {
        }

        #endregion

        #region Internal methods

        /// <summary>
        /// Create a <#=modelName#>
        /// </summary>
        /// <returns>JSON object for <#=modelName#></returns>
        internal <#=entityName#>ViewModel<T> Create()
        {
            var viewModel = GetViewModel(new T(), null);

            viewModel.UserAccess = GetAccessRights();

            return viewModel;
        }

        /// <summary>
        /// Get a <#=modelName#>
        /// </summary>
        /// <param name="id">Id for <#=modelName#></param>
        /// <returns>JSON object for <#=modelName#></returns>
        internal <#=entityName#>ViewModel<T> GetById(string id)
        {
            var data = Service.GetById(id);
            var userMessage = new UserMessage(data);

            return GetViewModel(data, userMessage);
        }

        /// <summary>
        /// Add a <#=modelName#>
        /// </summary>
        /// <param name="model">Model for <#=modelName#></param>
        /// <returns>JSON object for <#=modelName#></returns>
        internal <#=entityName#>ViewModel<T> Add(T model)
        {
            var data = Service.Add(model);

            var userMessage = new UserMessage(data,
                string.Format(CommonResx.AddSuccessMessage, <#=resxName#>.<#=keyFieldName#>, data.<#=keyFieldName#>));

            return GetViewModel(data, userMessage);
       }

        /// <summary>
        /// Update a <#=modelName#>
        /// </summary>
        /// <param name="model">Model for <#=modelName#></param>
        /// <returns>JSON object for <#=modelName#></returns>
        internal <#=entityName#>ViewModel<T> Save(T model)
        {
            var data = Service.Save(model);
            var userMessage = new UserMessage(data, CommonResx.SaveSuccessMessage);

            return GetViewModel(data, userMessage);
        }

        /// <summary>
        /// Delete a <#=modelName#>
        /// </summary>
        /// <param name="id">Id for <#=modelName#></param>
        /// <returns>JSON object for <#=modelName#></returns>
        internal <#=entityName#>ViewModel<T> Delete(string id)
        {
            Expression<Func<T, bool>> filter = param => param.<#=keyFieldName#> == id;
            var data = Service.Delete(filter);

            var userMessage = new UserMessage(data,
                string.Format(CommonResx.DeleteSuccessMessage, <#=resxName#>.<#=keyFieldName#>, data.<#=keyFieldName#>));

            return GetViewModel(data, userMessage);
        }

        #endregion

        #region Private methods

        /// <summary>
        /// Generic routine to return a view model for <#=modelName#>
        /// </summary>
        /// <param name="model">Model for <#=modelName#></param>
        /// <param name="userMessage">User Message for <#=modelName#></param>
        /// <returns>View Model for <#=modelName#></returns>
        private <#=entityName#>ViewModel<T> GetViewModel(T model, UserMessage userMessage)
        {
            return new <#=entityName#>ViewModel<T>
            {
                Data = model,
                UserMessage = userMessage
            };
        }

        #endregion

	}
}