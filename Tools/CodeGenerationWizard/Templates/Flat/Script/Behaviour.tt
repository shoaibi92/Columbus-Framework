<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
    // Locals
    var entityName = view.Properties[BusinessView.EntityName];
    var localEntityName = entityName.Substring(0, 1).ToLower() + entityName.Substring(1);
    var moduleId = view.Properties[BusinessView.ModuleId];
    var copyright = settings.Copyright;
    var keyFieldName = view.Keys.Count > 0 ? view.Keys.First() : entityName;
    var localKeyFieldName = keyFieldName.Substring(0, 1).ToLower() + keyFieldName.Substring(1);
#>
/* <#=copyright#> */

"use strict";

var modelData;
var <#=localEntityName#>UI = <#=localEntityName#>UI || {};

<#=localEntityName#>UI = {
    <#=localEntityName#>Model: {},
    ignoreIsDirtyProperties: ["<#=keyFieldName#>"],
    computedProperties: ["UIMode"],
    hasKoBindingApplied: false,
    isKendoControlNotInitialised: false,
    <#=localKeyFieldName#>: null,

    // Init
    init: function () {
    <#=localEntityName#>UI.initButtons();
    <#=localEntityName#>UI.initFinders();
    <#=localEntityName#>UISuccess.initialLoad(<#=entityName#>ViewModel);
    <#=localEntityName#>UISuccess.setkey();
    },

    // Save
    save<#=entityName#>: function () {
        if ($("#frm<#=entityName#>").valid()) {
            var data = sg.utls.ko.toJS(modelData, <#=localEntityName#>UI.computedProperties);
            if (modelData.UIMode() === sg.utls.OperationMode.SAVE) {
                <#=localEntityName#>Repository.update(data, <#=localEntityName#>UISuccess.update);
            } else {
                <#=localEntityName#>Repository.add(data, <#=localEntityName#>UISuccess.update);
            }
        }
    },

    // Init Buttons
    initButtons: function () {
        // Import/Export Buttons
        sg.exportHelper.setExportEvent("btnOptionExport", "<#=moduleId.ToLower()#><#=entityName.ToLower()#>", false, $.noop);
        sg.importHelper.setImportEvent("btnOptionImport", "<#=moduleId.ToLower()#><#=entityName.ToLower()#>", false, $.noop);

        // Key field with Finder
        $("#txt<#=keyFieldName#>").bind('blur', function (e) {
            modelData.<#=keyFieldName#>($("#txt<#=keyFieldName#>").val());
            sg.delayOnBlur("btnFinder<#=keyFieldName#>", function () {
                if (sg.controls.GetString(modelData.<#=keyFieldName#>() != "")) {
                    if (sg.controls.GetString(<#=localEntityName#>UI.<#=localKeyFieldName#>) != sg.controls.GetString(modelData.<#=keyFieldName#>())) {
                        <#=localEntityName#>UI.checkIsDirty(<#=localEntityName#>UI.get, <#=localEntityName#>UI.<#=localKeyFieldName#>);
                    }
                }
            });
        });

        // Create New Button
        $("#btnNew").bind('click', function () {
            <#=localEntityName#>UI.checkIsDirty(<#=localEntityName#>UI.create, <#=localEntityName#>UI.<#=localKeyFieldName#>);
        });

        // Save Button
        $("#btnSave").bind('click', function () {
            sg.utls.SyncExecute(<#=localEntityName#>UI.save<#=entityName#>);
        });

        // Delete Button
        $("#btnDelete").bind('click', function () {
            if ($("#frm<#=entityName#>").valid()) {
                var message = jQuery.validator.format(<#=localEntityName#>Resources.DeleteConfirmMessage, <#=localEntityName#>Resources.<#=keyFieldName#>Title, modelData.<#=keyFieldName#>());
                sg.utls.showKendoConfirmationDialog(function () {
                    sg.utls.clearValidations("frm<#=entityName#>");
                    <#=localEntityName#>Repository.delete(modelData.<#=keyFieldName#>(), <#=localEntityName#>UISuccess.delete);
                }, null, message, <#=localEntityName#>Resources.DeleteTitle);
            }
        });

    },

    // Init Dropdowns here

    // Init Finders, if any
    initFinders: function () {
        var title = jQuery.validator.format(<#=localEntityName#>Resources.FinderTitle, <#=localEntityName#>Resources.<#=keyFieldName#>Title);
        sg.finderHelper.setFinder("btnFinder<#=keyFieldName#>", "<#=moduleId.ToLower()#><#=entityName.ToLower()#>", <#=localEntityName#>UISuccess.finderSuccess, $.noop, title, <#=localEntityName#>Filter.getFilter);
    },

    // Get
    get: function () {
        <#=localEntityName#>Repository.get(modelData.<#=keyFieldName#>(), <#=localEntityName#>UISuccess.get);
    },

    // Create
    create: function () {
        sg.utls.clearValidations("frm<#=entityName#>");
        <#=localEntityName#>Repository.create(<#=localEntityName#>UISuccess.create);
    },

    // Is Dirty check
    checkIsDirty: function (funcionToCall, <#=localKeyFieldName#>) {
        if (<#=localEntityName#>UI.<#=localEntityName#>Model.isModelDirty.isDirty() && <#=localKeyFieldName#> != null && <#=localKeyFieldName#> != "") {
            sg.utls.showKendoConfirmationDialog(
                function () { // Yes
                    sg.utls.clearValidations("frm<#=entityName#>");
                    funcionToCall.call();
                },
                function () { // No
                    if (sg.controls.GetString(<#=localKeyFieldName#>) != sg.controls.GetString(modelData.<#=keyFieldName#>())) {
                        modelData.<#=keyFieldName#>(<#=localKeyFieldName#>);
                   }
                   return;
                },
                jQuery.validator.format(globalResource.SaveConfirm, <#=localEntityName#>Resources.<#=keyFieldName#>Title, <#=localKeyFieldName#>));
        } else {
            funcionToCall.call();
        }
    }

};

// Callbacks
var <#=localEntityName#>UISuccess = {

    // Setkey
    setkey: function () {
        <#=localEntityName#>UI.<#=localKeyFieldName#> = modelData.<#=keyFieldName#>();
    },

    // Get
    get: function (jsonResult) {
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            if (jsonResult.Data != null) {
                <#=localEntityName#>UISuccess.displayResult(jsonResult, sg.utls.OperationMode.SAVE);
            } else {
                modelData.UIMode(sg.utls.OperationMode.NEW);
            }
            <#=localEntityName#>UISuccess.setkey();
        }
    },

    // Update
    update: function (jsonResult) {
        if (jsonResult.UserMessage.IsSuccess) {
            <#=localEntityName#>UISuccess.displayResult(jsonResult, sg.utls.OperationMode.SAVE);
            <#=localEntityName#>UISuccess.setkey();
        }
        sg.utls.showMessage(jsonResult);
    },

    // Create
    create: function (jsonResult) {
        <#=localEntityName#>UISuccess.displayResult(jsonResult, sg.utls.OperationMode.NEW);
        <#=localEntityName#>UI.<#=localEntityName#>Model.isModelDirty.reset();
        <#=localEntityName#>UISuccess.setkey();
        sg.controls.Focus($("#txt<#=keyFieldName#>"));
    },

    // Delete
    delete: function (jsonResult) {
        if (jsonResult.UserMessage.IsSuccess) {
            <#=localEntityName#>UISuccess.displayResult(jsonResult, sg.utls.OperationMode.NEW);
            <#=localEntityName#>UI.<#=localEntityName#>Model.isModelDirty.reset();
            <#=localEntityName#>UISuccess.setkey();
        }
        sg.utls.showMessage(jsonResult);
    },

    // Display Result
    displayResult: function (jsonResult, uiMode) {
        if (jsonResult != null) {
            if (!<#=localEntityName#>UI.hasKoBindingApplied) {
                <#=localEntityName#>UI.<#=localEntityName#>Model = ko.mapping.fromJS(jsonResult);
                <#=localEntityName#>UI.hasKoBindingApplied = true;
                modelData = <#=localEntityName#>UI.<#=localEntityName#>Model.Data;
                <#=localEntityName#>ObservableExtension(<#=localEntityName#>UI.<#=localEntityName#>Model, uiMode);
                <#=localEntityName#>UI.<#=localEntityName#>Model.isModelDirty = new ko.dirtyFlag(modelData, <#=localEntityName#>UI.ignoreIsDirtyProperties);
                ko.applyBindings(<#=localEntityName#>UI.<#=localEntityName#>Model);
            } else {
                ko.mapping.fromJS(jsonResult, <#=localEntityName#>UI.<#=localEntityName#>Model);
                modelData.UIMode(uiMode);
                if (uiMode != sg.utls.OperationMode.NEW) {
                    <#=localEntityName#>UI.<#=localEntityName#>Model.isModelDirty.reset();
                }
            }

            if (!<#=localEntityName#>UI.isKendoControlNotInitialised) {
                <#=localEntityName#>UI.isKendoControlNotInitialised = true;
            } else {
                // 
            }
        }
    },

    // Initial Load
    initialLoad: function (result) {
        if (result) {
            <#=localEntityName#>UISuccess.displayResult(result, sg.utls.OperationMode.NEW);
        } else {
            sg.utls.showMessageInfo(sg.utls.msgType.ERROR, <#=localEntityName#>Resources.ProcessFailedMessage);
        }
        sg.controls.Focus($("#txt<#=keyFieldName#>"));
    },

    // Finder Success
    finderSuccess: function (data) {
        if (data != null) {
            <#=localEntityName#>UI.finderData = data;
            <#=localEntityName#>UI.checkIsDirty(<#=localEntityName#>UISuccess.setFinderData, <#=localEntityName#>UI.<#=localKeyFieldName#>);
        }
    },

    // Set Finder
    setFinderData: function () {
        var data = <#=localEntityName#>UI.finderData;
        sg.utls.clearValidations("frm<#=entityName#>");
        ko.mapping.fromJS(data, {}, modelData);
        <#=localEntityName#>UI.finderData = null;
        modelData.UIMode(sg.utls.OperationMode.SAVE);
        <#=localEntityName#>UI.<#=localEntityName#>Model.isModelDirty.reset();
        <#=localEntityName#>UISuccess.setkey();
    },

    // Is New
    isNew: function (model) {
        if (model.<#=keyFieldName#>() === null) {
           return true;
        }
        return false;
    }

};

// Finder Filter
var <#=localEntityName#>Filter = {
    getFilter: function () {
        var filters = [[]];
        var <#=localEntityName#>Name = $("#txt<#=keyFieldName#>").val();
        filters[0][0] = sg.finderHelper.createFilter("<#=keyFieldName#>", sg.finderOperator.StartsWith, <#=localEntityName#>Name);
        return filters;
    }
};

// Initial Entry
$(function () {
    <#=localEntityName#>UI.init();
    $(window).bind('beforeunload', function () {
        if (globalResource.AllowPageUnloadEvent && <#=localEntityName#>UI.<#=localEntityName#>Model.isModelDirty.isDirty()) {
            return jQuery('<div />').html(jQuery.validator.format(globalResource.SaveConfirm2, <#=localEntityName#>Resources.<#=keyFieldName#>Title)).text();
        }
    });

});
