<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var modelName = view.Properties[BusinessView.ModelName];
    var entityName = view.Properties[BusinessView.EntityName];

    var webModuleNamespace = settings.DoesAreasExist ? "Web.Areas." + moduleId : moduleId + ".Web";
#>
// <#=copyright#>

#region Namespace

using Microsoft.Practices.Unity;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums;
using Sage.CA.SBS.ERP.Sage300.Common.Web.Controllers.Reports;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.Services.Reports;
using <#=companyNamespace#>.<#=moduleId#>.Models.Reports;
using <#=companyNamespace#>.<#=webModuleNamespace#>.Models.Reports;

#endregion

namespace <#=companyNamespace#>.<#=webModuleNamespace#>.Controllers.Reports
{
    /// <summary>
    /// Public controller for <#=entityName#>
    /// </summary>
    /// <typeparam name="T"><#=modelName#></typeparam>
    public class <#=entityName#>Controller<T> : ReportController<T, <#=entityName#>ViewModel<T>, 
        <#=entityName#>ControllerInternal<T, <#=entityName#>ViewModel<T>, I<#=entityName#>Service<T>>, 
        I<#=entityName#>Service<T>> where T : <#=modelName#>, new()
    {
        #region Constructor

        /// <summary>
        /// Constructor for <#=entityName#>
        /// </summary>
        /// <param name="container">Unity Container</param>
        public <#=entityName#>Controller(IUnityContainer container)
            : base(container, context => new <#=entityName#>ControllerInternal<T, <#=entityName#>ViewModel<T>,
                I<#=entityName#>Service<T>>(context),"<#=moduleId#><#=entityName#>")
        {
        }

        #endregion

    }
}
