// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Templates.Common.Class
{
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class Model : ModelBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 5 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

    // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var resxName = settings.ResxName;
    var companyNamespace = settings.CompanyNamespace;
    var resourceExtension = settings.ResourceExtension;
    var extension = settings.Extension;
    var modelName = view.Properties[BusinessView.ModelName];
    var repositoryType = settings.RepositoryType;
    var applicationNamespace = (settings.RepositoryType.Equals(RepositoryType.DynamicQuery)) ? "Application" : string.Empty;

            
            #line default
            #line hidden
            this.Write("// ");
            
            #line 17 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(copyright));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n#region Namespace\r\n\r\n");
            
            #line 21 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

    if (repositoryType.Equals(RepositoryType.DynamicQuery))
    {

            
            #line default
            #line hidden
            this.Write("using Sage.CA.SBS.ERP.Sage300.Common.Models;\r\n");
            
            #line 26 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

    }
    else
    {

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing Sage.CA.SBS.ER" +
                    "P.Sage300.Common.Models");
            
            #line 33 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((repositoryType.Equals(RepositoryType.Report) ? extension : string.Empty)));
            
            #line default
            #line hidden
            this.Write(";\r\nusing Sage.CA.SBS.ERP.Sage300.Common.Models.Attributes;\r\nusing Sage.CA.SBS.ERP" +
                    ".Sage300.Common.Resources;\r\n\r\n");
            
            #line 37 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

        if (!repositoryType.Equals(RepositoryType.Report) && view.Enums.Count > 0)
        {

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 41 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(companyNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 41 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleId));
            
            #line default
            #line hidden
            this.Write(".Models.Enums");
            
            #line 41 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(extension));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 42 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

        }

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 45 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(companyNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 45 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleId));
            
            #line default
            #line hidden
            this.Write(".Resources");
            
            #line 45 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resourceExtension));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 46 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n#endregion\r\n\r\nnamespace ");
            
            #line 52 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(companyNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 52 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleId));
            
            #line default
            #line hidden
            this.Write(".Models");
            
            #line 52 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(extension));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// Partial class for ");
            
            #line 55 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelName));
            
            #line default
            #line hidden
            this.Write("\r\n    /// </summary>\r\n    public partial class ");
            
            #line 57 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 57 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(applicationNamespace));
            
            #line default
            #line hidden
            
            #line 57 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((repositoryType.Equals(RepositoryType.Report) ? "ReportBase" : "ModelBase")));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 59 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                // Iterate fields collection
            for (var i = 0; i < view.Fields.Count; i++)
            {
                // locals
                var field = view.Fields[i];
                var fieldName = field.Name;

                // Naming convention is potentially invalid
                if (fieldName.All(Char.IsUpper))
                {

            
            #line default
            #line hidden
            this.Write("        // TODO The naming convention of this property has to be manually evaluat" +
                    "ed\r\n");
            
            #line 72 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                }

            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Gets or sets ");
            
            #line 76 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n");
            
            #line 78 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                if (!repositoryType.Equals(RepositoryType.DynamicQuery) && !repositoryType.Equals(RepositoryType.Report))
                {
                    // Check for Key annotation
                    var annotation = field.IsKey ? "[Key]" : string.Empty;
                    if (!annotation.Equals(string.Empty))
                    {

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 86 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(annotation));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 87 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                    }

                    // Check for Required annotation
                    annotation = field.IsRequired ? string.Format("[Required(ErrorMessageResourceName = \"" + "Required" + "\", ErrorMessageResourceType = typeof(AnnotationsResx))]") : string.Empty;
                    if (!annotation.Equals(string.Empty))
                    {

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 95 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(annotation));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 96 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                    }

                    // Check for Stringlength annotation
                    annotation = field.Type.Equals(BusinessDataType.String) ? string.Format("[StringLength({0}, ErrorMessageResourceName = \"" + "MaxLength" + "\",ErrorMessageResourceType = typeof(AnnotationsResx))]", field.Size) : string.Empty;
                    if (!annotation.Equals(string.Empty))
                    {

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 104 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(annotation));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 105 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                    }

                    // Check for DateTime annotation
                    if (field.Type.Equals(BusinessDataType.DateTime))
                    {
                        annotation = string.Format("[ValidateDateFormat(ErrorMessageResourceName=\"DateFormat\"" + ", ErrorMessageResourceType = typeof(AnnotationsResx))]");

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 113 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(annotation));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 114 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                    }
                }

                if (!repositoryType.Equals(RepositoryType.DynamicQuery))
                {
                    // Display attribute

            
            #line default
            #line hidden
            this.Write("        [Display(Name = \"");
            
            #line 122 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));
            
            #line default
            #line hidden
            this.Write("\", ResourceType = typeof (");
            
            #line 122 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resxName));
            
            #line default
            #line hidden
            this.Write("))]\r\n");
            
            #line 123 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                }

                // Property

            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 128 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((field.Type.Equals(BusinessDataType.Enumeration) ? field.Name : EnumValue.GetValue(field.Type))));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 128 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n\r\n");
            
            #line 130 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

            }

            if (!repositoryType.Equals(RepositoryType.DynamicQuery) && !repositoryType.Equals(RepositoryType.Report))
            {

            
            #line default
            #line hidden
            this.Write("        #region UI Strings\r\n\r\n");
            
            #line 138 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                // UI access methods
                foreach (var value in view.Enums.Values)
                {

            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Gets ");
            
            #line 144 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));
            
            #line default
            #line hidden
            this.Write(" string value\r\n        /// </summary>\r\n        public string ");
            
            #line 146 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));
            
            #line default
            #line hidden
            this.Write("String\r\n        {\r\n         get { return EnumUtility.GetStringValue(");
            
            #line 148 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));
            
            #line default
            #line hidden
            this.Write("); }\r\n        }\r\n\r\n");
            
            #line 151 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

                }

            
            #line default
            #line hidden
            this.Write("        #endregion\r\n");
            
            #line 155 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

            }

            
            #line default
            #line hidden
            this.Write("    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\CNA2R2\Columbus-Framework\Tools\CodeGenerationWizard\Templates\Common\Class\Model.tt"

private global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView _viewField;

/// <summary>
/// Access the view parameter of the template.
/// </summary>
private global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView view
{
    get
    {
        return this._viewField;
    }
}

private global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings _settingsField;

/// <summary>
/// Access the settings parameter of the template.
/// </summary>
private global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings settings
{
    get
    {
        return this._settingsField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool viewValueAcquired = false;
if (this.Session.ContainsKey("view"))
{
    this._viewField = ((global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView)(this.Session["view"]));
    viewValueAcquired = true;
}
if ((viewValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("view");
    if ((data != null))
    {
        this._viewField = ((global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView)(data));
    }
}
bool settingsValueAcquired = false;
if (this.Session.ContainsKey("settings"))
{
    this._settingsField = ((global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings)(this.Session["settings"]));
    settingsValueAcquired = true;
}
if ((settingsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("settings");
    if ((data != null))
    {
        this._settingsField = ((global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ModelBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
