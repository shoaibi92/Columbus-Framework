<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdderInputPrompt" xml:space="preserve">
    <value>Input file(Right click on the top and choose Edit to do paste): 
</value>
  </data>
  <data name="AdderOutputPrompt" xml:space="preserve">
    <value>Output folder: (Up arrow gets the input above) 
</value>
  </data>
  <data name="DialogCaption" xml:space="preserve">
    <value>Application Error</value>
  </data>
  <data name="ErrorFailSummary" xml:space="preserve">
    <value>Failed to process {0} files. Details in {1}\</value>
  </data>
  <data name="ErrorInput" xml:space="preserve">
    <value>The path is not found. Please re-enter: 
</value>
  </data>
  <data name="ErrorWritingFile" xml:space="preserve">
    <value>Please contact the developers with the following information:

</value>
  </data>
  <data name="ErrorWrongFormat" xml:space="preserve">
    <value>Line {0} has wrong format in the input file!</value>
  </data>
  <data name="ExpectionLogInfo" xml:space="preserve">
    <value>Processing {0} failed
{1}</value>
  </data>
  <data name="ExtractorInputPrompt" xml:space="preserve">
    <value>Input folder(Right click on the top and choose Edit to do paste):
</value>
  </data>
  <data name="ExtractorOutputPrompt" xml:space="preserve">
    <value>Output file: (Up arrow gets the input above)
</value>
  </data>
  <data name="Fail" xml:space="preserve">
    <value>failed.</value>
  </data>
  <data name="FailLogInfo" xml:space="preserve">
    <value>Processing {0} failed</value>
  </data>
  <data name="GetDescription" xml:space="preserve">
    <value>Get the Description!</value>
  </data>
  <data name="LogFile" xml:space="preserve">
    <value>log.txt</value>
  </data>
  <data name="PromptAdderFinish" xml:space="preserve">
    <value>Finished the description insertion to the output files!</value>
  </data>
  <data name="PromptExtractorFinish" xml:space="preserve">
    <value>Finished writing description to the output file!</value>
  </data>
  <data name="PromptInsert" xml:space="preserve">
    <value>succeeded. Insert the Description!</value>
  </data>
  <data name="PromptProcessing" xml:space="preserve">
    <value>{0}/{1} Processing description in {2} </value>
  </data>
  <data name="PromptRetry" xml:space="preserve">
    <value>Would you like to retry?(Y/N)</value>
  </data>
  <data name="PromptToolChoose" xml:space="preserve">
    <value>Please choose 1/2:
(1)Extract description       (2)Add description</value>
  </data>
  <data name="PromptWrongChoice" xml:space="preserve">
    <value>Wrong Choice, Retry</value>
  </data>
  <data name="Succeed" xml:space="preserve">
    <value>succeeded.</value>
  </data>
  <data name="TitleLine" xml:space="preserve">
    <value>Source File Path,Output File Path,File Name,Topic Class,Meta Description</value>
  </data>
  <data name="NewLine" xml:space="preserve">
    <value>
</value>
  </data>
  <data name="FileProcessSummary" xml:space="preserve">
    <value>Total {0} .htm files to be processed.</value>
  </data>
  <data name="PromptContinue" xml:space="preserve">
    <value>Type in any key to continue..</value>
  </data>
  <data name="PromptExit" xml:space="preserve">
    <value>Type in any key to exit..</value>
  </data>
</root>